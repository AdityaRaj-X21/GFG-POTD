class Pair { 
    int first;
    int second;
    Pair(int first, int second) {
        this.first=first;
        this.second=second;
    }
}

class Solution {
    public static void bfs(int row, int col, int[][] vis, char[][] grid) {
        vis[row][col] = 1;
        Queue<Pair> q = new LinkedList<Pair>();
        q.add(new Pair(row, col));
        int n = grid.length;
        int m = grid[0].length;
        while(!q.isEmpty()) {
            int r = q.peek().first;
            int c = q.peek().second;
            q.remove();
            for(int i=-1;i<=1;i++) {
                for(int j=-1;j<=1;j++) {
                    int nrow = r + i;
                    int ncol = c + j;
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='L' && vis[nrow][ncol] == 0) {
                        q.add(new Pair(nrow, ncol));
                        vis[nrow][ncol] = 1;
                    }
                }
            }
        }
    }
    public int countIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] vis = new int[n][m];
        int cnt = 0;
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                if(grid[i][j] == 'L' && vis[i][j] == 0) {
                    cnt++;
                    bfs(i,j,vis,grid);
                }
            }
        }
        return cnt;
    }
}
